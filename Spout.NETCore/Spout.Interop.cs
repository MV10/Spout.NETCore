// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace Spout.Interop
{
    public unsafe partial class Spout : global::Spout.Interop.SpoutGL, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2008)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::Spout.Interop.SpoutDirectX.__Internal spoutdx;
            internal global::Spout.Interop.SpoutCopy.__Internal spoutcopy;
            internal global::Spout.Interop.SpoutSenderNames.__Internal sendernames;
            internal global::Spout.Interop.SpoutFrameCount.__Internal frame;
            internal global::Spout.Interop.SpoutSharedMemory.__Internal memoryshare;
            internal int m_nBuffers;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal fixed uint m_loadpbo[4];
            internal int PboLoadIndex;
            internal int NextPboLoadIndex;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_DestWidth;
            internal uint m_DestHeight;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal global::DXGI_FORMAT m_DX11format;
            internal uint m_dwFormat;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal byte m_bInteropFailed;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bSender;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;
            internal fixed byte m_AdapterNamePadding[3];
            internal fixed sbyte m_AdapterName[256];
            internal byte m_bAdapt;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@Spout@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@Spout@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@Spout@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetReceiverName@Spout@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetReceiverName(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderIndex@Spout@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@Spout@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@Spout@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@Spout@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@Spout@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@Spout@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@Spout@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderAdapter@Spout@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderAdapter(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@Spout@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@Spout@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@Spout@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@Spout@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0000H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@Spout@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@Spout@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@Spout@@QEAA_NPEADAEAI1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@Spout@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSpoutPanel@Spout@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSpoutPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@Spout@@IEAA_NII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitReceiver@Spout@@IEAAXPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitReceiver(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveSenderData@Spout@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveSenderData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@Spout@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@Spout@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@Spout@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);
        }

        internal static new Spout __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Spout(native.ToPointer(), skipVTables);
        }

        internal static new Spout __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Spout)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static new Spout __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (Spout)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static Spout __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Spout(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.Interop.Spout.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private Spout(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Spout(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public Spout()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.Spout.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "Spout.Interop.Spout");
        }

        public Spout(global::Spout.Interop.Spout _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.Spout.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "Spout.Interop.Spout");
        }

        ~Spout()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Spout.Interop.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var ___ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return ___ret;
        }

        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        public bool GetReceiverName(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.GetReceiverName(__Instance, sendername, maxchars);
            return ___ret;
        }

        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        public bool ReceiveTexture()
        {
            var ___ret = __Internal.ReceiveTexture(__Instance);
            return ___ret;
        }

        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return ___ret;
        }

        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return ___ret;
        }

        public int GetSenderIndex(string sendername)
        {
            var ___ret = __Internal.GetSenderIndex(__Instance, sendername);
            return ___ret;
        }

        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        public void SetFrameSync(string name)
        {
            __Internal.SetFrameSync(__Instance, name);
        }

        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        public int GetSenderAdapter(string sendername, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetSenderAdapter(__Instance, sendername, adaptername, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var ___ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return ___ret;
            }
        }

        public bool GetAdapterInfo(sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, renderadapter, renderdescription, renderversion, displaydescription, displayversion, maxsize);
            return ___ret;
        }

        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return ___ret;
        }

        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var ___ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return ___ret;
        }

        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2);
                    return ___ret;
                }
            }
        }

        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var ___ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return ___ret;
                    }
                }
            }
        }

        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        public bool SelectSenderPanel(string message)
        {
            var ___ret = __Internal.SelectSenderPanel(__Instance, message);
            return ___ret;
        }

        public bool CheckSpoutPanel(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.CheckSpoutPanel(__Instance, sendername, maxchars);
            return ___ret;
        }

        protected bool CheckSender(uint width, uint height)
        {
            var ___ret = __Internal.CheckSender(__Instance, width, height);
            return ___ret;
        }

        protected void InitReceiver(string sendername, uint width, uint height, uint dwFormat)
        {
            __Internal.InitReceiver(__Instance, sendername, width, height, dwFormat);
        }

        protected bool ReceiveSenderData()
        {
            var ___ret = __Internal.ReceiveSenderData(__Instance);
            return ___ret;
        }

        protected sbyte[] MAdapterName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_AdapterName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_AdapterName[i] = value[i];
                }
            }
        }

        protected bool MBAdapt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAdapt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAdapt = (byte) (value ? 1 : 0);
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }

            set
            {
                __Internal.SetSenderName(__Instance, value);
            }
        }

        public uint SenderFormat
        {
            get
            {
                var ___ret = __Internal.GetSenderFormat(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetSenderFormat(__Instance, value);
            }
        }

        public bool IsInitialized
        {
            get
            {
                var ___ret = __Internal.IsInitialized(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint Width
        {
            get
            {
                var ___ret = __Internal.GetWidth(__Instance);
                return ___ret;
            }
        }

        public uint Height
        {
            get
            {
                var ___ret = __Internal.GetHeight(__Instance);
                return ___ret;
            }
        }

        public double Fps
        {
            get
            {
                var ___ret = __Internal.GetFps(__Instance);
                return ___ret;
            }
        }

        public int Frame
        {
            get
            {
                var ___ret = __Internal.GetFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var ___ret = __Internal.GetHandle(__Instance);
                return ___ret;
            }
        }

        public bool CPU
        {
            get
            {
                var ___ret = __Internal.GetCPU(__Instance);
                return ___ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var ___ret = __Internal.GetGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var ___ret = __Internal.IsUpdated(__Instance);
                return ___ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var ___ret = __Internal.IsConnected(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public uint SenderWidth
        {
            get
            {
                var ___ret = __Internal.GetSenderWidth(__Instance);
                return ___ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var ___ret = __Internal.GetSenderHeight(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var ___ret = __Internal.GetSenderHandle(__Instance);
                return ___ret;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var ___ret = __Internal.GetSenderCPU(__Instance);
                return ___ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var ___ret = __Internal.GetSenderGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        #region Virtual table interop

        // ~Spout()
        private static global::Spout.Interop.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::Spout.Interop.Spout.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    namespace Spoututils
    {
        public enum SpoutLogLevel
        {
            SPOUT_LOG_SILENT = 0,
            SPOUT_LOG_VERBOSE = 1,
            SPOUT_LOG_NOTICE = 2,
            SPOUT_LOG_WARNING = 3,
            SPOUT_LOG_ERROR = 4,
            SPOUT_LOG_FATAL = 5,
            SPOUT_LOG_NONE = 6
        }

        public unsafe partial class SpoutUtils
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSDKversion@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSDKversion(__IntPtr @return, int* number);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutVersion(__IntPtr @return, int* number);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsLaptop@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsLaptop();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExeVersion@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExeVersion(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExePath@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExePath(__IntPtr @return, bool bFull);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExeName@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExeName(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPath@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetPath(__IntPtr @return, __IntPtr fullpath);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetName(__IntPtr @return, __IntPtr fullpath);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpoutConsole@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void OpenSpoutConsole([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseSpoutConsole@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void CloseSpoutConsole(bool bWarning);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLog@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLog([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLogFile@spoututils@@YAXPEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLogFile([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, bool bAppend);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLogFile@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLogFile();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemoveSpoutLogFile@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void RemoveSpoutLogFile([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLog@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLog();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LogsEnabled@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool LogsEnabled();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LogFileEnabled@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool LogFileEnabled();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutLogPath@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutLogPath(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutLog@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutLog(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filepath);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ShowSpoutLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void ShowSpoutLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSpoutLogLevel@spoututils@@YAXW4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetSpoutLogLevel(global::Spout.Interop.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLog@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLog([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogVerbose@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogVerbose([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogNotice@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogNotice([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogWarning@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogWarning([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogError@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogFatal@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogFatal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?_conprint@spoututils@@YAHPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int Conprint([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message, uint dwMilliseconds);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBD0ZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string caption, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBDI0ZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string caption, uint uType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBoxIcon@spoututils@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool SpoutMessageBoxIcon(__IntPtr iconfile);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBoxModeless@spoututils@@YA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool SpoutMessageBoxModeless(bool bMode);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpoutLogs@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OpenSpoutLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetRefreshRate@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double GetRefreshRate();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartTiming@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void StartTiming();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EndTiming@spoututils@@YAN_N0@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double EndTiming(bool microseconds, bool bPrint);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ElapsedMicroseconds@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double ElapsedMicroseconds();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartCounter@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void StartCounter();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCounter@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double GetCounter();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?_logtofile@?A0x0@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Logtofile(bool append);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?_getLogPath@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetLogPath(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?_getLogFilePath@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetLogFilePath(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?_levelName@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void LevelName(__IntPtr @return, global::Spout.Interop.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?ExecuteProcess@?A0x0@spoututils@@YA_NPEBD0@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool ExecuteProcess([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?OpenSpoutPanel@?A0x0@spoututils@@YA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OpenSpoutPanel([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);
            }

            public static string GetSDKversion(ref int number)
            {
                fixed (int* __number0 = &number)
                {
                    var __arg0 = __number0;
                    var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetSDKversion(new IntPtr(&___ret), __arg0);
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            public static string GetSpoutVersion(ref int number)
            {
                fixed (int* __number0 = &number)
                {
                    var __arg0 = __number0;
                    var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetSpoutVersion(new IntPtr(&___ret), __arg0);
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }

            public static bool IsLaptop()
            {
                var ___ret = __Internal.IsLaptop();
                return ___ret;
            }

            public static string GetExeVersion(string path)
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExeVersion(new IntPtr(&___ret), path);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetExePath(bool bFull)
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExePath(new IntPtr(&___ret), bFull);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetExeName()
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExeName(new IntPtr(&___ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetPath(string fullpath)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, fullpath);
                var __arg0 = __basicString0.__Instance;
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetPath(new IntPtr(&___ret), __arg0);
                __basicString0.Dispose(disposing: true, callNativeDtor:false);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetName(string fullpath)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, fullpath);
                var __arg0 = __basicString0.__Instance;
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetName(new IntPtr(&___ret), __arg0);
                __basicString0.Dispose(disposing: true, callNativeDtor:false);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static void OpenSpoutConsole(string title)
            {
                __Internal.OpenSpoutConsole(title);
            }

            public static void CloseSpoutConsole(bool bWarning)
            {
                __Internal.CloseSpoutConsole(bWarning);
            }

            public static void EnableSpoutLog(string title)
            {
                __Internal.EnableSpoutLog(title);
            }

            public static void EnableSpoutLogFile(string filename, bool bAppend)
            {
                __Internal.EnableSpoutLogFile(filename, bAppend);
            }

            public static void DisableSpoutLogFile()
            {
                __Internal.DisableSpoutLogFile();
            }

            public static void RemoveSpoutLogFile(string filename)
            {
                __Internal.RemoveSpoutLogFile(filename);
            }

            public static void DisableSpoutLog()
            {
                __Internal.DisableSpoutLog();
            }

            public static void DisableLogs()
            {
                __Internal.DisableLogs();
            }

            public static void EnableLogs()
            {
                __Internal.EnableLogs();
            }

            public static bool LogsEnabled()
            {
                var ___ret = __Internal.LogsEnabled();
                return ___ret;
            }

            public static bool LogFileEnabled()
            {
                var ___ret = __Internal.LogFileEnabled();
                return ___ret;
            }

            public static string GetSpoutLogPath()
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSpoutLogPath(new IntPtr(&___ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetSpoutLog(string filepath)
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSpoutLog(new IntPtr(&___ret), filepath);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static void ShowSpoutLogs()
            {
                __Internal.ShowSpoutLogs();
            }

            public static void SetSpoutLogLevel(global::Spout.Interop.Spoututils.SpoutLogLevel level)
            {
                __Internal.SetSpoutLogLevel(level);
            }

            public static void SpoutLog(string format)
            {
                __Internal.SpoutLog(format);
            }

            public static void SpoutLogVerbose(string format)
            {
                __Internal.SpoutLogVerbose(format);
            }

            public static void SpoutLogNotice(string format)
            {
                __Internal.SpoutLogNotice(format);
            }

            public static void SpoutLogWarning(string format)
            {
                __Internal.SpoutLogWarning(format);
            }

            public static void SpoutLogError(string format)
            {
                __Internal.SpoutLogError(format);
            }

            public static void SpoutLogFatal(string format)
            {
                __Internal.SpoutLogFatal(format);
            }

            public static int Conprint(string format)
            {
                var ___ret = __Internal.Conprint(format);
                return ___ret;
            }

            public static int SpoutMessageBox(string message, uint dwMilliseconds)
            {
                var ___ret = __Internal.SpoutMessageBox(message, dwMilliseconds);
                return ___ret;
            }

            public static int SpoutMessageBox(string caption, string format)
            {
                var ___ret = __Internal.SpoutMessageBox_1(caption, format);
                return ___ret;
            }

            public static int SpoutMessageBox(string caption, uint uType, string format)
            {
                var ___ret = __Internal.SpoutMessageBox(caption, uType, format);
                return ___ret;
            }

            public static bool SpoutMessageBoxIcon(string iconfile)
            {
                var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                global::Std.BasicStringExtensions.Assign(__basicString0, iconfile);
                var __arg0 = __basicString0.__Instance;
                var ___ret = __Internal.SpoutMessageBoxIcon(__arg0);
                __basicString0.Dispose(disposing: true, callNativeDtor:false);
                return ___ret;
            }

            public static bool SpoutMessageBoxModeless(bool bMode)
            {
                var ___ret = __Internal.SpoutMessageBoxModeless(bMode);
                return ___ret;
            }

            public static bool OpenSpoutLogs()
            {
                var ___ret = __Internal.OpenSpoutLogs();
                return ___ret;
            }

            public static double GetRefreshRate()
            {
                var ___ret = __Internal.GetRefreshRate();
                return ___ret;
            }

            public static void StartTiming()
            {
                __Internal.StartTiming();
            }

            public static double EndTiming(bool microseconds, bool bPrint)
            {
                var ___ret = __Internal.EndTiming(microseconds, bPrint);
                return ___ret;
            }

            public static double ElapsedMicroseconds()
            {
                var ___ret = __Internal.ElapsedMicroseconds();
                return ___ret;
            }

            public static void StartCounter()
            {
                __Internal.StartCounter();
            }

            public static double GetCounter()
            {
                var ___ret = __Internal.GetCounter();
                return ___ret;
            }

            public static void Logtofile(bool append)
            {
                __Internal.Logtofile(append);
            }

            public static string GetLogPath()
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetLogPath(new IntPtr(&___ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string GetLogFilePath(string filename)
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetLogFilePath(new IntPtr(&___ret), filename);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static string LevelName(global::Spout.Interop.Spoututils.SpoutLogLevel level)
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.LevelName(new IntPtr(&___ret), level);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            public static bool ExecuteProcess(string path, string command)
            {
                var ___ret = __Internal.ExecuteProcess(path, command);
                return ___ret;
            }

            public static bool OpenSpoutPanel(string message)
            {
                var ___ret = __Internal.OpenSpoutPanel(message);
                return ___ret;
            }

            public static bool BTopMost { get; } = false;

            public static bool BModeless { get; } = false;

            public static bool BEdit { get; } = false;

            public static string Stredit { get; } = "";

            public static bool BCombo { get; } = false;

            public static int Comboindex { get; } = 0;
        }
    }

    public enum ExtLogLevel
    {
        SPOUT_EXT_LOG_SILENT = 0,
        SPOUT_EXT_LOG_VERBOSE = 1,
        SPOUT_EXT_LOG_NOTICE = 2,
        SPOUT_EXT_LOG_WARNING = 3,
        SPOUT_EXT_LOG_ERROR = 4,
        SPOUT_EXT_LOG_FATAL = 5,
        SPOUT_EXT_LOG_NONE = 6
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXOPENDEVICENVPROC(__IntPtr dxDevice);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXCLOSEDEVICENVPROC(__IntPtr hDevice);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr dxObject, uint name, uint type, uint access);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr hObject);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXSETRESOURCESHAREHANDLENVPROC(__IntPtr dxResource, __IntPtr shareHandle);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindFramebufferEXTPROC(uint target, uint framebuffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindRenderbufferEXTPROC(uint target, uint renderbuffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCheckFramebufferStatusEXTPROC(uint target);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCheckNamedFramebufferStatusEXTPROC(uint framebuffer, uint target);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteFramebuffersEXTPROC(int n, uint* framebuffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteRenderBuffersEXTPROC(int n, uint* renderbuffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferRenderbufferEXTPROC(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture1DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture2DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture3DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenFramebuffersEXTPROC(int n, uint* framebuffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenRenderbuffersEXTPROC(int n, uint* renderbuffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenerateMipmapEXTPROC(uint target);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetFramebufferAttachmentParameterivEXTPROC(uint target, uint attachment, uint pname, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetRenderbufferParameterivEXTPROC(uint target, uint pname, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsFramebufferEXTPROC(uint framebuffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsRenderbufferEXTPROC(uint renderbuffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlRenderbufferStorageEXTPROC(uint target, uint internalformat, int width, int height);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBlitFramebufferEXTPROC(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLSWAPINTERVALEXTPROC(int interval);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLGETSWAPINTERVALEXTPROC();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenBuffersPROC(int n, uint* buffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteBuffersPROC(int n, uint* buffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindBufferPROC(uint target, uint buffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferDataPROC(uint target, long size, __IntPtr data, uint usage);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferStoragePROC(uint target, long size, __IntPtr data, uint flags);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferPROC(uint target, uint access);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferRangePROC(uint target, long offset, long length, uint access);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlUnmapBufferPROC(uint target);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetBufferParameterivPROC(uint target, uint value, int* data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetTextureParameterivPROC(uint texture, uint value, int* data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlClientWaitSyncPROC(__IntPtr sync, uint flags, ulong timeout);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteSyncPROC(__IntPtr sync);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlFenceSyncPROC(uint condition, uint flags);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOPYIMAGESUBDATAPROC(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetInternalformativPROC(uint target, uint internalfrmat, uint pname, int buffSize, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCreateProgramPROC();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCreateShaderPROC(uint type);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlShaderSourcePROC(uint shader, int count, sbyte** @string, int* length);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCompileShaderPROC(uint shader);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlAttachShaderPROC(uint program, uint shader);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlLinkProgramPROC(uint program);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetProgramivPROC(uint program, uint pname, int* param);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetProgramInfoLogPROC(uint program, int maxLength, int* length, sbyte* infoLog);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetShaderInfoLogPROC(uint shader, int maxLength, int* length, sbyte* infoLog);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetIntegeriVPROC(uint target, uint index, int* data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDetachShaderPROC(uint program, uint shader);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUseProgramPROC(uint program);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindImageTexturePROC(uint unit, uint texture, int level, byte layered, int layer, uint access, uint format);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDispatchComputePROC(uint num_groups_x, uint num_groups_y, uint num_groups_z);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteProgramPROC(uint program);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteShaderPROC(uint shader);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlMemoryBarrierPROC(uint barriers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlActiveTexturePROC(uint texture);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUniform1iPROC(int location, int v0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUniform1fPROC(int location, float v0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int GlGetUniformLocationPROC(uint program, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTextureStorage2DPROC(uint texture, int levels, uint internalformat, int width, int height);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateTexturesPROC(uint target, int n, uint* textures);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateMemoryObjectsEXTPROC(int n, uint* memoryObjects);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteMemoryObjectsEXTPROC(int n, uint* memoryObjects);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTexStorageMem2DEXTPROC(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTextureStorageMem2DEXTPROC(uint texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlImportMemoryWin32HandleEXTPROC(uint memory, ulong size, uint handleType, __IntPtr handle);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferStorageMemEXTPROC(uint target, long size, uint memory, ulong offset);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlMemoryObjectParameterivEXTPROC(uint memoryObject, uint pname, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetMemoryObjectParameterivEXTPROC(uint memoryObject, uint pname, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsMemoryObjectEXTPROC(uint memoryObject);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateBuffersPROC(int n, uint* buffers);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindBufferBasePROC(uint target, uint index, uint buffer);

    public unsafe partial class GLsync
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.GLsync>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.GLsync>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.GLsync managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.GLsync>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.GLsync managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static GLsync __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new GLsync(native.ToPointer(), skipVTables);
        }

        internal static GLsync __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (GLsync)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static GLsync __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new GLsync(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GLsync(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected GLsync(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class SpoutGLextensions
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?InitializeGlew@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InitializeGlew();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadGLextensions@@YAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint LoadGLextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadInteropExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadInteropExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadFBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadFBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadBLITextension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadBLITextension();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadSwapExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadSwapExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadPBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadPBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadCopyExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadCopyExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadGLmemoryExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadGLmemoryExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadComputeShaderExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadComputeShaderExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?loadContextExtension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadContextExtension();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?isExtensionSupported@@YA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExtensionSupported([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string extension);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "?ExtLog@@YAXW4ExtLogLevel@@PEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExtLog(global::Spout.Interop.ExtLogLevel level, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);
        }

        public static bool InitializeGlew()
        {
            var ___ret = __Internal.InitializeGlew();
            return ___ret;
        }

        public static uint LoadGLextensions()
        {
            var ___ret = __Internal.LoadGLextensions();
            return ___ret;
        }

        public static bool LoadInteropExtensions()
        {
            var ___ret = __Internal.LoadInteropExtensions();
            return ___ret;
        }

        public static bool LoadFBOextensions()
        {
            var ___ret = __Internal.LoadFBOextensions();
            return ___ret;
        }

        public static bool LoadBLITextension()
        {
            var ___ret = __Internal.LoadBLITextension();
            return ___ret;
        }

        public static bool LoadSwapExtensions()
        {
            var ___ret = __Internal.LoadSwapExtensions();
            return ___ret;
        }

        public static bool LoadPBOextensions()
        {
            var ___ret = __Internal.LoadPBOextensions();
            return ___ret;
        }

        public static bool LoadCopyExtensions()
        {
            var ___ret = __Internal.LoadCopyExtensions();
            return ___ret;
        }

        public static bool LoadGLmemoryExtensions()
        {
            var ___ret = __Internal.LoadGLmemoryExtensions();
            return ___ret;
        }

        public static bool LoadComputeShaderExtensions()
        {
            var ___ret = __Internal.LoadComputeShaderExtensions();
            return ___ret;
        }

        public static bool LoadContextExtension()
        {
            var ___ret = __Internal.LoadContextExtension();
            return ___ret;
        }

        public static bool IsExtensionSupported(string extension)
        {
            var ___ret = __Internal.IsExtensionSupported(extension);
            return ___ret;
        }

        public static void ExtLog(global::Spout.Interop.ExtLogLevel level, string format)
        {
            __Internal.ExtLog(level, format);
        }

        public static global::Spout.Interop.PFNWGLDXOPENDEVICENVPROC WglDXOpenDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXOPENDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXOPENDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXCLOSEDEVICENVPROC WglDXCloseDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXCLOSEDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXCLOSEDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXREGISTEROBJECTNVPROC WglDXRegisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXUNREGISTEROBJECTNVPROC WglDXUnregisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXUNREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXUNREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXSETRESOURCESHAREHANDLENVPROC WglDXSetResourceShareHandleNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXSETRESOURCESHAREHANDLENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXSETRESOURCESHAREHANDLENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXLOCKOBJECTSNVPROC WglDXLockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLDXUNLOCKOBJECTSNVPROC WglDXUnlockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLDXUNLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLDXUNLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBindFramebufferEXTPROC GlBindFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindFramebufferEXT__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBindFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBindFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindFramebufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBindRenderbufferEXTPROC GlBindRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindRenderbufferEXT__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBindRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBindRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindRenderbufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCheckFramebufferStatusEXTPROC GlCheckFramebufferStatusEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCheckFramebufferStatusEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCheckFramebufferStatusEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCheckNamedFramebufferStatusEXTPROC GlCheckNamedFramebufferStatusEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCheckNamedFramebufferStatusEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCheckNamedFramebufferStatusEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteFramebuffersEXTPROC GlDeleteFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteRenderBuffersEXTPROC GlDeleteRenderBuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteRenderBuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteRenderBuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlFramebufferRenderbufferEXTPROC GlFramebufferRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlFramebufferRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlFramebufferRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlFramebufferTexture1DEXTPROC GlFramebufferTexture1DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlFramebufferTexture1DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlFramebufferTexture1DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlFramebufferTexture2DEXTPROC GlFramebufferTexture2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlFramebufferTexture2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlFramebufferTexture2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlFramebufferTexture3DEXTPROC GlFramebufferTexture3DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlFramebufferTexture3DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlFramebufferTexture3DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGenFramebuffersEXTPROC GlGenFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGenFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGenFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGenRenderbuffersEXTPROC GlGenRenderbuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGenRenderbuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGenRenderbuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGenerateMipmapEXTPROC GlGenerateMipmapEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenerateMipmapEXT__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGenerateMipmapEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGenerateMipmapEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenerateMipmapEXT__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetFramebufferAttachmentParameterivEXTPROC GlGetFramebufferAttachmentParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetFramebufferAttachmentParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetFramebufferAttachmentParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetRenderbufferParameterivEXTPROC GlGetRenderbufferParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetRenderbufferParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetRenderbufferParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlIsFramebufferEXTPROC GlIsFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsFramebufferEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlIsFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlIsFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsFramebufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlIsRenderbufferEXTPROC GlIsRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsRenderbufferEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlIsRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlIsRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsRenderbufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlRenderbufferStorageEXTPROC GlRenderbufferStorageEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlRenderbufferStorageEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlRenderbufferStorageEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBlitFramebufferEXTPROC GlBlitFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBlitFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBlitFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLSWAPINTERVALEXTPROC WglSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglSwapIntervalEXT__3P6AHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglSwapIntervalEXT__3P6AHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNWGLGETSWAPINTERVALEXTPROC WglGetSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglGetSwapIntervalEXT__3P6AHXZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNWGLGETSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNWGLGETSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._wglGetSwapIntervalEXT__3P6AHXZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGenBuffersPROC GlGenBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenBuffers__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGenBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGenBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGenBuffers__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteBuffersPROC GlDeleteBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteBuffers__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteBuffers__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBindBufferPROC GlBindBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindBuffer__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBindBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBindBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindBuffer__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBufferDataPROC GlBufferData
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferData__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBufferDataPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBufferDataPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferData__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBufferStoragePROC GlBufferStorage
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferStorage__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBufferStoragePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBufferStoragePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferStorage__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlMapBufferPROC GlMapBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMapBuffer__3P6APEAXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlMapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlMapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMapBuffer__3P6APEAXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlMapBufferRangePROC GlMapBufferRange
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMapBufferRange__3P6APEAXI_J0I_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlMapBufferRangePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlMapBufferRangePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMapBufferRange__3P6APEAXI_J0I_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlUnmapBufferPROC GlUnmapBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUnmapBuffer__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlUnmapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlUnmapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUnmapBuffer__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetBufferParameterivPROC GlGetBufferParameteriv
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetBufferParameteriv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetBufferParameterivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetBufferParameterivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetBufferParameteriv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetTextureParameterivPROC GlGetTextureParameteriv
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetTextureParameteriv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetTextureParameterivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetTextureParameterivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetTextureParameteriv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlClientWaitSyncPROC GlClientWaitSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlClientWaitSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlClientWaitSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteSyncPROC GlDeleteSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlFenceSyncPROC GlFenceSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlFenceSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlFenceSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.PFNGLCOPYIMAGESUBDATAPROC GlCopyImageSubData
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.PFNGLCOPYIMAGESUBDATAPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.PFNGLCOPYIMAGESUBDATAPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetInternalformativPROC GlGetInternalformativ
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetInternalformativ__3P6AXIIIHPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetInternalformativPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetInternalformativPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetInternalformativ__3P6AXIIIHPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCreateProgramPROC GlCreateProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateProgram__3P6AIXZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCreateProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCreateProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateProgram__3P6AIXZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCreateShaderPROC GlCreateShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateShader__3P6AII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCreateShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCreateShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateShader__3P6AII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlShaderSourcePROC GlShaderSource
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlShaderSourcePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlShaderSourcePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCompileShaderPROC GlCompileShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCompileShader__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCompileShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCompileShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCompileShader__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlAttachShaderPROC GlAttachShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glAttachShader__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlAttachShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlAttachShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glAttachShader__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlLinkProgramPROC GlLinkProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glLinkProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlLinkProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlLinkProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glLinkProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetProgramivPROC GlGetProgramiv
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetProgramiv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetProgramivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetProgramivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetProgramiv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetProgramInfoLogPROC GlGetProgramInfoLog
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetProgramInfoLogPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetProgramInfoLogPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetShaderInfoLogPROC GlGetShaderInfoLog
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetShaderInfoLogPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetShaderInfoLogPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetIntegeriVPROC GlGetIntegeriV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetIntegeri_v__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetIntegeriVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetIntegeriVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetIntegeri_v__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDetachShaderPROC GlDetachShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDetachShader__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDetachShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDetachShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDetachShader__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlUseProgramPROC GlUseProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUseProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlUseProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlUseProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUseProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBindImageTexturePROC GlBindImageTexture
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindImageTexture__3P6AXIIHEHII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBindImageTexturePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBindImageTexturePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindImageTexture__3P6AXIIHEHII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDispatchComputePROC GlDispatchCompute
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDispatchCompute__3P6AXIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDispatchComputePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDispatchComputePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDispatchCompute__3P6AXIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteProgramPROC GlDeleteProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteShaderPROC GlDeleteShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteShader__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteShader__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlMemoryBarrierPROC GlMemoryBarrier
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMemoryBarrier__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlMemoryBarrierPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlMemoryBarrierPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMemoryBarrier__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlActiveTexturePROC GlActiveTexture
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glActiveTexture__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlActiveTexturePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlActiveTexturePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glActiveTexture__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlUniform1iPROC GlUniform1i
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUniform1i__3P6AXHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlUniform1iPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlUniform1iPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUniform1i__3P6AXHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlUniform1fPROC GlUniform1f
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUniform1f__3P6AXHM_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlUniform1fPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlUniform1fPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glUniform1f__3P6AXHM_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetUniformLocationPROC GlGetUniformLocation
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetUniformLocation__3P6AHIPEBD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetUniformLocationPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetUniformLocationPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetUniformLocation__3P6AHIPEBD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlTextureStorage2DPROC GlTextureStorage2D
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTextureStorage2D__3P6AXIHIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlTextureStorage2DPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlTextureStorage2DPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTextureStorage2D__3P6AXIHIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCreateTexturesPROC GlCreateTextures
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateTextures__3P6AXIHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCreateTexturesPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCreateTexturesPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateTextures__3P6AXIHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCreateMemoryObjectsEXTPROC GlCreateMemoryObjectsEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCreateMemoryObjectsEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCreateMemoryObjectsEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlDeleteMemoryObjectsEXTPROC GlDeleteMemoryObjectsEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlDeleteMemoryObjectsEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlDeleteMemoryObjectsEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlTexStorageMem2DEXTPROC GlTexStorageMem2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlTexStorageMem2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlTexStorageMem2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlTextureStorageMem2DEXTPROC GlTextureStorageMem2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlTextureStorageMem2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlTextureStorageMem2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlImportMemoryWin32HandleEXTPROC GlImportMemoryWin32HandleEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlImportMemoryWin32HandleEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlImportMemoryWin32HandleEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBufferStorageMemEXTPROC GlBufferStorageMemEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferStorageMemEXT__3P6AXI_JI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBufferStorageMemEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBufferStorageMemEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBufferStorageMemEXT__3P6AXI_JI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlMemoryObjectParameterivEXTPROC GlMemoryObjectParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlMemoryObjectParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlMemoryObjectParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlGetMemoryObjectParameterivEXTPROC GlGetMemoryObjectParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlGetMemoryObjectParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlGetMemoryObjectParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlIsMemoryObjectEXTPROC GlIsMemoryObjectEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsMemoryObjectEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlIsMemoryObjectEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlIsMemoryObjectEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glIsMemoryObjectEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlCreateBuffersPROC GlCreateBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateBuffers__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlCreateBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlCreateBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glCreateBuffers__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static global::Spout.Interop.GlBindBufferBasePROC GlBindBufferBase
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindBufferBase__3P6AXIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::Spout.Interop.GlBindBufferBasePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.Interop.GlBindBufferBasePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.Interop.__Symbols.Spout_Interop_dll._glBindBufferBase__3P6AXIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public enum SpoutCreateResult
    {
        SPOUT_CREATE_FAILED = 0,
        SPOUT_CREATE_SUCCESS = 1,
        SPOUT_ALREADY_EXISTS = 2,
        SPOUT_ALREADY_CREATED = 3
    }

    public unsafe partial class SpoutSharedMemory : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr m_pBuffer;
            internal __IntPtr m_hMap;
            internal __IntPtr m_hMutex;
            internal int m_lockCount;
            internal __IntPtr m_pName;
            internal int m_size;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0SpoutSharedMemory@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Create@SpoutSharedMemory@@QEAA?AW4SpoutCreateResult@@PEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::Spout.Interop.SpoutCreateResult Create(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Open@SpoutSharedMemory@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Open(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Close@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Close(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Unlock@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Unlock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Debug@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Debug(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Lock@SpoutSharedMemory@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Lock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Name@SpoutSharedMemory@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Name(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Size@SpoutSharedMemory@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Size(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSharedMemory>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSharedMemory>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutSharedMemory managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutSharedMemory>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutSharedMemory managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSharedMemory __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSharedMemory(native.ToPointer(), skipVTables);
        }

        internal static SpoutSharedMemory __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSharedMemory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSharedMemory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSharedMemory(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSharedMemory(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSharedMemory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutSharedMemory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutSharedMemory(global::Spout.Interop.SpoutSharedMemory _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SpoutSharedMemory.__Internal*) __Instance) = *((global::Spout.Interop.SpoutSharedMemory.__Internal*) _0.__Instance);
        }

        ~SpoutSharedMemory()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Spout.Interop.SpoutCreateResult Create(string name, int size)
        {
            var ___ret = __Internal.Create(__Instance, name, size);
            return ___ret;
        }

        public bool Open(string name)
        {
            var ___ret = __Internal.Open(__Instance, name);
            return ___ret;
        }

        public void Close()
        {
            __Internal.Close(__Instance);
        }

        public void Unlock()
        {
            __Internal.Unlock(__Instance);
        }

        public void Debug()
        {
            __Internal.Debug(__Instance);
        }

        public sbyte* Lock
        {
            get
            {
                var ___ret = __Internal.Lock(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.Name(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public int Size
        {
            get
            {
                var ___ret = __Internal.Size(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class SharedTextureInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 280)]
        public partial struct __Internal
        {
            internal uint shareHandle;
            internal uint width;
            internal uint height;
            internal uint format;
            internal uint usage;
            internal fixed byte description[256];
            internal uint partnerId;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0SharedTextureInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SharedTextureInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SharedTextureInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SharedTextureInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SharedTextureInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SharedTextureInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SharedTextureInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SharedTextureInfo(native.ToPointer(), skipVTables);
        }

        internal static SharedTextureInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SharedTextureInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SharedTextureInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SharedTextureInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SharedTextureInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SharedTextureInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SharedTextureInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public SharedTextureInfo(global::Spout.Interop.SharedTextureInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SharedTextureInfo.__Internal*) __Instance) = *((global::Spout.Interop.SharedTextureInfo.__Internal*) _0.__Instance);
        }

        ~SharedTextureInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->shareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->shareHandle = value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((__Internal*)__Instance)->format;
            }

            set
            {
                ((__Internal*)__Instance)->format = value;
            }
        }

        public uint Usage
        {
            get
            {
                return ((__Internal*)__Instance)->usage;
            }

            set
            {
                ((__Internal*)__Instance)->usage = value;
            }
        }

        public byte[] Description
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->description, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->description[i] = value[i];
                }
            }
        }

        public uint PartnerId
        {
            get
            {
                return ((__Internal*)__Instance)->partnerId;
            }

            set
            {
                ((__Internal*)__Instance)->partnerId = value;
            }
        }
    }

    public unsafe partial class SpoutSenderNames : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 112)]
        public partial struct __Internal
        {
            internal global::Spout.Interop.SpoutSharedMemory.__Internal m_senderNames;
            internal global::Spout.Interop.SpoutSharedMemory.__Internal m_activeSender;
            internal __IntPtr m_senders;
            internal int m_MaxSenders;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0spoutSenderNames@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RegisterSenderName@spoutSenderNames@@QEAA_NPEAD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RegisterSenderName(__IntPtr __instance, sbyte* sendername, bool bNewname);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReleaseSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@spoutSenderNames@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderIndex@spoutSenderNames@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderNameInfo@spoutSenderNames@@QEAA_NHPEADHAEAI1AEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderNameInfo(__IntPtr __instance, int index, sbyte* sendername, int sendernameMaxSize, uint* width, uint* height, __IntPtr* dxShareHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderInfo@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutSenderNames@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getSharedInfo@spoutSenderNames@@QEAA_NPEBDPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setSharedInfo@spoutSenderNames@@QEAA_NPEBDPEBUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?hasSharedInfo@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@spoutSenderNames@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSenderInfo@spoutSenderNames@@QEAA_NPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderInfo(__IntPtr __instance, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindActiveSender@spoutSenderNames@@QEAA_NPEADAEAI1AEAPEAXAEAKH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindActiveSender(__IntPtr __instance, sbyte* activename, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@spoutSenderNames@@QEAA_NPEADIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, sbyte* sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEADAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, sbyte* sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanSenders@spoutSenderNames@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSenderSet@spoutSenderNames@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setActiveSenderName@spoutSenderNames@@IEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getActiveSenderName@spoutSenderNames@@IEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderName(__IntPtr __instance, sbyte* SenderName, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?cleanSenderSet@spoutSenderNames@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutSenderNames@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSenderNames>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSenderNames>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutSenderNames managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutSenderNames>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutSenderNames managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSenderNames __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSenderNames(native.ToPointer(), skipVTables);
        }

        internal static SpoutSenderNames __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSenderNames)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSenderNames __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSenderNames(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSenderNames(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSenderNames(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutSenderNames()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutSenderNames(global::Spout.Interop.SpoutSenderNames _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SpoutSenderNames.__Internal*) __Instance) = *((global::Spout.Interop.SpoutSenderNames.__Internal*) _0.__Instance);
        }

        ~SpoutSenderNames()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool RegisterSenderName(sbyte* sendername, bool bNewname)
        {
            var ___ret = __Internal.RegisterSenderName(__Instance, sendername, bNewname);
            return ___ret;
        }

        public bool ReleaseSenderName(string sendername)
        {
            var ___ret = __Internal.ReleaseSenderName(__Instance, sendername);
            return ___ret;
        }

        public bool FindSenderName(string sendername)
        {
            var ___ret = __Internal.FindSenderName(__Instance, sendername);
            return ___ret;
        }

        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        public int GetSenderIndex(string sendername)
        {
            var ___ret = __Internal.GetSenderIndex(__Instance, sendername);
            return ___ret;
        }

        public bool GetSenderNameInfo(int index, sbyte* sendername, int sendernameMaxSize, ref uint width, ref uint height, __IntPtr* dxShareHandle)
        {
            fixed (uint* __width3 = &width)
            {
                var __arg3 = __width3;
                fixed (uint* __height4 = &height)
                {
                    var __arg4 = __height4;
                    var ___ret = __Internal.GetSenderNameInfo(__Instance, index, sendername, sendernameMaxSize, __arg3, __arg4, dxShareHandle);
                    return ___ret;
                }
            }
        }

        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool SetSenderInfo(string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat)
        {
            var ___ret = __Internal.SetSenderInfo(__Instance, sendername, width, height, dxShareHandle, dwFormat);
            return ___ret;
        }

        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var ___ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return ___ret;
        }

        public bool GetSharedInfo(string sendername, global::Spout.Interop.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.GetSharedInfo(__Instance, sendername, __arg1);
            return ___ret;
        }

        public bool SetSharedInfo(string sendername, global::Spout.Interop.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.SetSharedInfo(__Instance, sendername, __arg1);
            return ___ret;
        }

        public bool HasSharedInfo(string sendername)
        {
            var ___ret = __Internal.HasSharedInfo(__Instance, sendername);
            return ___ret;
        }

        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool GetActiveSender(sbyte* sendername, int maxlength)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername, maxlength);
            return ___ret;
        }

        public bool GetActiveSenderInfo(global::Spout.Interop.SharedTextureInfo info)
        {
            var __arg0 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.GetActiveSenderInfo(__Instance, __arg0);
            return ___ret;
        }

        public bool FindActiveSender(sbyte* activename, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat, int maxlength)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.FindActiveSender(__Instance, activename, __arg1, __arg2, hSharehandle, __arg4, maxlength);
                        return ___ret;
                    }
                }
            }
        }

        public bool CreateSender(sbyte* sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return ___ret;
        }

        public bool UpdateSender(string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var ___ret = __Internal.UpdateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return ___ret;
        }

        public bool CheckSender(string sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.CheckSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool FindSender(sbyte* sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.FindSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool FindSender(string sendername)
        {
            var ___ret = __Internal.FindSender(__Instance, sendername);
            return ___ret;
        }

        public void CleanSenders()
        {
            __Internal.CleanSenders(__Instance);
        }

        protected bool CreateSenderSet()
        {
            var ___ret = __Internal.CreateSenderSet(__Instance);
            return ___ret;
        }

        protected bool SetActiveSenderName(string SenderName)
        {
            var ___ret = __Internal.SetActiveSenderName(__Instance, SenderName);
            return ___ret;
        }

        protected bool GetActiveSenderName(sbyte* SenderName, int maxlength)
        {
            var ___ret = __Internal.GetActiveSenderName(__Instance, SenderName, maxlength);
            return ___ret;
        }

        protected void CleanSenderSet()
        {
            __Internal.CleanSenderSet(__Instance);
        }

        protected global::Spout.Interop.SpoutSharedMemory MSenderNames
        {
            get
            {
                return global::Spout.Interop.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_senderNames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_senderNames = *(global::Spout.Interop.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected global::Spout.Interop.SpoutSharedMemory MActiveSender
        {
            get
            {
                return global::Spout.Interop.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_activeSender));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_activeSender = *(global::Spout.Interop.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected int MMaxSenders
        {
            get
            {
                return ((__Internal*)__Instance)->m_MaxSenders;
            }

            set
            {
                ((__Internal*)__Instance)->m_MaxSenders = value;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }
    }

    public unsafe partial class SpoutSenderNames
    {
        public partial struct __Internal
        {
        }

        public static string GUID_queue { get; } = "AB5C33D6-3654-43F9-85F6-F54872B0460B";
    }

    public unsafe partial class SpoutDirectX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal int m_AdapterIndex;
            internal __IntPtr m_pAdapterDX11;
            internal __IntPtr m_pd3dDevice;
            internal __IntPtr m_pImmediateContext;
            internal byte m_bClassDevice;
            internal global::D3D_DRIVER_TYPE m_driverType;
            internal global::D3D_FEATURE_LEVEL m_featureLevel;
            internal __IntPtr m_pd3dDevice1;
            internal __IntPtr m_pImmediateContext1;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0spoutDirectX@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX11@spoutDirectX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Flush@spoutDirectX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Flush(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@spoutDirectX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterIndex@spoutDirectX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapterIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string adaptername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@spoutDirectX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@spoutDirectX@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* adaptername, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@spoutDirectX@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* adaptername, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@spoutDirectX@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@spoutDirectX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@spoutDirectX@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@spoutDirectX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@spoutDirectX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@spoutDirectX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@spoutDirectX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutDirectX>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutDirectX>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutDirectX managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutDirectX>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutDirectX managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutDirectX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutDirectX(native.ToPointer(), skipVTables);
        }

        internal static SpoutDirectX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutDirectX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutDirectX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutDirectX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutDirectX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutDirectX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutDirectX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutDirectX(global::Spout.Interop.SpoutDirectX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SpoutDirectX.__Internal*) __Instance) = *((global::Spout.Interop.SpoutDirectX.__Internal*) _0.__Instance);
        }

        ~SpoutDirectX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void CloseDirectX11()
        {
            __Internal.CloseDirectX11(__Instance);
        }

        public void Flush()
        {
            __Internal.Flush(__Instance);
        }

        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        public int GetAdapterIndex(string adaptername)
        {
            var ___ret = __Internal.GetAdapterIndex(__Instance, adaptername);
            return ___ret;
        }

        public bool SetAdapter(int index)
        {
            var ___ret = __Internal.SetAdapter(__Instance, index);
            return ___ret;
        }

        public bool GetAdapterInfo(sbyte* adaptername, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, adaptername, output, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(int index, sbyte* adaptername, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, adaptername, output, maxchars);
            return ___ret;
        }

        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var ___ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return ___ret;
            }
        }

        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        protected int MAdapterIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_AdapterIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_AdapterIndex = value;
            }
        }

        protected bool MBClassDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClassDevice != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClassDevice = (byte) (value ? 1 : 0);
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class SpoutFrameCount : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 640)]
        public partial struct __Internal
        {
            internal __IntPtr m_hAccessMutex;
            internal byte m_bFrameCount;
            internal byte m_bCountDisabled;
            internal byte m_bIsNewFrame;
            internal __IntPtr m_hCountSemaphore;
            internal fixed sbyte m_CountSemaphoreName[256];
            internal fixed sbyte m_SenderName[256];
            internal int m_FrameCount;
            internal int m_LastFrameCount;
            internal double m_FrameTime;
            internal double m_FrameTimeTotal;
            internal double m_FrameTimeNumber;
            internal double m_lastFrame;
            internal double m_SystemFps;
            internal double m_SenderFps;
            internal uint m_PeriodMin;
            internal byte m_bFrameSync;
            internal __IntPtr m_hSyncEvent;
            internal __IntPtr m_FpsStartPtr;
            internal __IntPtr m_FpsEndPtr;
            internal __IntPtr m_FrameStartPtr;
            internal __IntPtr m_FrameEndPtr;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0spoutFrameCount@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameCount@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameCount(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?PauseFrameCount@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PauseFrameCount(__IntPtr __instance, bool bPaused);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@spoutFrameCount@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetNewFrame@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitNewFrame@spoutFrameCount@@QEAA_NK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitNewFrame(__IntPtr __instance, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateAccessMutex@spoutFrameCount@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateAccessMutex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseAccessMutex@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseAccessMutex(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckAccess@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AllowAccess@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AllowAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@spoutFrameCount@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckFrameSync@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSenderFps@spoutFrameCount@@IEAAXJ@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateSenderFps(__IntPtr __instance, int framecount);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartTimePeriod@spoutFrameCount@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartTimePeriod(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EndTimePeriod@spoutFrameCount@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EndTimePeriod(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenFrameSync@spoutFrameCount@@IEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@spoutFrameCount@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@spoutFrameCount@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@spoutFrameCount@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSenderName(__IntPtr __instance, __IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNewFrame@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutFrameCount>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutFrameCount>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutFrameCount managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutFrameCount>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutFrameCount managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutFrameCount __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutFrameCount(native.ToPointer(), skipVTables);
        }

        internal static SpoutFrameCount __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutFrameCount)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutFrameCount __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutFrameCount(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutFrameCount(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutFrameCount(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutFrameCount()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutFrameCount(global::Spout.Interop.SpoutFrameCount _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SpoutFrameCount.__Internal*) __Instance) = *((global::Spout.Interop.SpoutFrameCount.__Internal*) _0.__Instance);
        }

        ~SpoutFrameCount()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        public void EnableFrameCount(string SenderName)
        {
            __Internal.EnableFrameCount(__Instance, SenderName);
        }

        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        public void PauseFrameCount(bool bPaused)
        {
            __Internal.PauseFrameCount(__Instance, bPaused);
        }

        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        public void SetNewFrame()
        {
            __Internal.SetNewFrame(__Instance);
        }

        public bool WaitNewFrame(uint dwTimeout)
        {
            var ___ret = __Internal.WaitNewFrame(__Instance, dwTimeout);
            return ___ret;
        }

        public void CleanupFrameCount()
        {
            __Internal.CleanupFrameCount(__Instance);
        }

        public bool CreateAccessMutex(string SenderName)
        {
            var ___ret = __Internal.CreateAccessMutex(__Instance, SenderName);
            return ___ret;
        }

        public void CloseAccessMutex()
        {
            __Internal.CloseAccessMutex(__Instance);
        }

        public bool CheckAccess()
        {
            var ___ret = __Internal.CheckAccess(__Instance);
            return ___ret;
        }

        public void AllowAccess()
        {
            __Internal.AllowAccess(__Instance);
        }

        public void SetFrameSync(string name)
        {
            __Internal.SetFrameSync(__Instance, name);
        }

        public bool WaitFrameSync(string name, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, name, dwTimeout);
            return ___ret;
        }

        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        public bool CheckFrameSync()
        {
            var ___ret = __Internal.CheckFrameSync(__Instance);
            return ___ret;
        }

        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        protected void UpdateSenderFps(int framecount)
        {
            __Internal.UpdateSenderFps(__Instance, framecount);
        }

        protected void StartTimePeriod()
        {
            __Internal.StartTimePeriod(__Instance);
        }

        protected void EndTimePeriod()
        {
            __Internal.EndTimePeriod(__Instance);
        }

        protected void OpenFrameSync(string SenderName)
        {
            __Internal.OpenFrameSync(__Instance, SenderName);
        }

        protected __IntPtr MHAccessMutex
        {
            get
            {
                return ((__Internal*)__Instance)->m_hAccessMutex;
            }

            set
            {
                ((__Internal*)__Instance)->m_hAccessMutex = (__IntPtr) value;
            }
        }

        protected bool MBFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFrameCount != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFrameCount = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCountDisabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCountDisabled != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCountDisabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBIsNewFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsNewFrame != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsNewFrame = (byte) (value ? 1 : 0);
            }
        }

        protected __IntPtr MHCountSemaphore
        {
            get
            {
                return ((__Internal*)__Instance)->m_hCountSemaphore;
            }

            set
            {
                ((__Internal*)__Instance)->m_hCountSemaphore = (__IntPtr) value;
            }
        }

        protected sbyte[] MCountSemaphoreName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_CountSemaphoreName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_CountSemaphoreName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected int MFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameCount = value;
            }
        }

        protected int MLastFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_LastFrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_LastFrameCount = value;
            }
        }

        protected double MFrameTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTime = value;
            }
        }

        protected double MFrameTimeTotal
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeTotal;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeTotal = value;
            }
        }

        protected double MFrameTimeNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeNumber = value;
            }
        }

        protected double MLastFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_lastFrame;
            }

            set
            {
                ((__Internal*)__Instance)->m_lastFrame = value;
            }
        }

        protected double MSystemFps
        {
            get
            {
                return ((__Internal*)__Instance)->m_SystemFps;
            }

            set
            {
                ((__Internal*)__Instance)->m_SystemFps = value;
            }
        }

        protected double MSenderFps
        {
            get
            {
                return ((__Internal*)__Instance)->m_SenderFps;
            }

            set
            {
                ((__Internal*)__Instance)->m_SenderFps = value;
            }
        }

        protected uint MPeriodMin
        {
            get
            {
                return ((__Internal*)__Instance)->m_PeriodMin;
            }

            set
            {
                ((__Internal*)__Instance)->m_PeriodMin = value;
            }
        }

        protected bool MBFrameSync
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFrameSync != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFrameSync = (byte) (value ? 1 : 0);
            }
        }

        protected __IntPtr MHSyncEvent
        {
            get
            {
                return ((__Internal*)__Instance)->m_hSyncEvent;
            }

            set
            {
                ((__Internal*)__Instance)->m_hSyncEvent = (__IntPtr) value;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSenderName(__Instance, new IntPtr(&___ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }
        }

        public bool NewFrame
        {
            get
            {
                var ___ret = __Internal.GetNewFrame(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class SpoutCopy : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 3)]
        public partial struct __Internal
        {
            internal byte m_bSSE2;
            internal byte m_bSSE3;
            internal byte m_bSSSE3;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout.Interop.dll", EntryPoint = "??0spoutCopy@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyPixels@spoutCopy@@QEBAXPEBEPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyPixels(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FlipBuffer@spoutCopy@@QEBAXPEBEPEAEIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipBuffer(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FlipBuffer@spoutCopy@@QEBAXPEAEIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipBuffer(__IntPtr __instance, byte* src, uint width, uint height, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutCopy@@QEBAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ClearAlpha@spoutCopy@@QEBAXPEAEIIE@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAlpha(__IntPtr __instance, byte* src, uint width, uint height, byte alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?memcpy_sse2@spoutCopy@@QEBAXPEAXPEBX_K@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemcpySse2(__IntPtr __instance, __IntPtr dst, __IntPtr src, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbaResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbaResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgba(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgb@spoutCopy@@QEBAXPEBXPEAXIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgb(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgrResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgrResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_to_rgb_sse3@spoutCopy@@QEBAXPEBXPEAXIII_N2@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaToRgbSse3(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint rgba_pitch, bool bInvert, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb_to_bgrx_sse@spoutCopy@@QEBAXIPEBXPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbToBgrxSse(__IntPtr __instance, uint npixels, __IntPtr rgb_source, __IntPtr bgrx_out);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb_to_bgra_sse3@spoutCopy@@QEBAXPEAX0II@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbToBgraSse3(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2bgra(__IntPtr __instance, __IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgb@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgb(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2bgr(__IntPtr __instance, __IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSSE@spoutCopy@@QEAAXAEA_N00@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSSE(__IntPtr __instance, bool* bSSE2, bool* bSSE3, bool* bSSSE3);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSSE@spoutCopy@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckSSE(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse2@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse2(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse3@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse3(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_swap_ssse3@spoutCopy@@IEAAXPEIAXII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaSwapSsse3(__IntPtr __instance, __IntPtr rgbasource, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSSE2@spoutCopy@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSSE2(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSSE3@spoutCopy@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSSE3(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSSSE3@spoutCopy@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSSSE3(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutCopy>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutCopy>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutCopy managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutCopy>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutCopy managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutCopy __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutCopy(native.ToPointer(), skipVTables);
        }

        internal static SpoutCopy __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutCopy)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutCopy __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutCopy(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutCopy(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutCopy(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutCopy()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutCopy(global::Spout.Interop.SpoutCopy _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Spout.Interop.SpoutCopy.__Internal*) __Instance) = *((global::Spout.Interop.SpoutCopy.__Internal*) _0.__Instance);
        }

        ~SpoutCopy()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void CopyPixels(byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert)
        {
            __Internal.CopyPixels(__Instance, src, dst, width, height, glFormat, bInvert);
        }

        public void FlipBuffer(byte* src, byte* dst, uint width, uint height, uint glFormat)
        {
            __Internal.FlipBuffer(__Instance, src, dst, width, height, glFormat);
        }

        public void FlipBuffer(byte* src, uint width, uint height, uint glFormat)
        {
            __Internal.FlipBuffer(__Instance, src, width, height, glFormat);
        }

        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, source_stride, glFormat);
        }

        public void ClearAlpha(byte* src, uint width, uint height, byte alpha)
        {
            __Internal.ClearAlpha(__Instance, src, width, height, alpha);
        }

        public void MemcpySse2(__IntPtr dst, __IntPtr src, ulong size)
        {
            __Internal.MemcpySse2(__Instance, dst, src, size);
        }

        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, bInvert);
        }

        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        public void Rgba2rgbaResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2rgbaResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, sourcePitch, bInvert);
        }

        public void Rgba2bgra(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        public void Bgra2rgba(__IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgba(__Instance, bgra_source, rgba_dest, width, height, bInvert);
        }

        public void Rgba2rgb(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgb(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert, bMirror, bSwapRB);
        }

        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert);
        }

        public void Rgba2rgbResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgbResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert, bMirror, bSwapRB);
        }

        public void Rgba2bgrResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2bgrResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        public void RgbaToRgbSse3(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint rgba_pitch, bool bInvert, bool bSwapRB)
        {
            __Internal.RgbaToRgbSse3(__Instance, rgba_source, rgb_dest, width, height, rgba_pitch, bInvert, bSwapRB);
        }

        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, bInvert);
        }

        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        public void Bgr2rgba(__IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, bgr_source, rgba_dest, width, height, bInvert);
        }

        public void Bgr2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, bInvert);
        }

        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, dest_pitch, bInvert);
        }

        public void RgbToBgrxSse(uint npixels, __IntPtr rgb_source, __IntPtr bgrx_out)
        {
            __Internal.RgbToBgrxSse(__Instance, npixels, rgb_source, bgrx_out);
        }

        public void RgbToBgraSse3(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height)
        {
            __Internal.RgbToBgraSse3(__Instance, rgb_source, rgba_dest, width, height);
        }

        public void Bgr2bgra(__IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2bgra(__Instance, bgr_source, bgra_dest, width, height, bInvert);
        }

        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, bgr_dest, width, height, bInvert);
        }

        public void Bgra2rgb(__IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgb(__Instance, bgra_source, rgb_dest, width, height, bInvert);
        }

        public void Bgra2bgr(__IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2bgr(__Instance, bgra_source, bgr_dest, width, height, bInvert);
        }

        public void GetSSE(ref bool bSSE2, ref bool bSSE3, ref bool bSSSE3)
        {
            fixed (bool* __bSSE20 = &bSSE2)
            {
                var __arg0 = __bSSE20;
                fixed (bool* __bSSE31 = &bSSE3)
                {
                    var __arg1 = __bSSE31;
                    fixed (bool* __bSSSE32 = &bSSSE3)
                    {
                        var __arg2 = __bSSSE32;
                        __Internal.GetSSE(__Instance, __arg0, __arg1, __arg2);
                    }
                }
            }
        }

        protected void CheckSSE()
        {
            __Internal.CheckSSE(__Instance);
        }

        protected void RgbaBgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        protected void RgbaBgraSse2(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse2(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        protected void RgbaBgraSse3(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse3(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        protected void RgbaSwapSsse3(__IntPtr rgbasource, uint width, uint height)
        {
            __Internal.RgbaSwapSsse3(__Instance, rgbasource, width, height);
        }

        protected bool MBSSE2
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE2 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE2 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE3 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSSE3 = (byte) (value ? 1 : 0);
            }
        }

        public bool SSE2
        {
            get
            {
                var ___ret = __Internal.GetSSE2(__Instance);
                return ___ret;
            }
        }

        public bool SSE3
        {
            get
            {
                var ___ret = __Internal.GetSSE3(__Instance);
                return ___ret;
            }
        }

        public bool SSSE3
        {
            get
            {
                var ___ret = __Internal.GetSSSE3(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class SpoutGL : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1744)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::Spout.Interop.SpoutDirectX.__Internal spoutdx;
            internal global::Spout.Interop.SpoutCopy.__Internal spoutcopy;
            internal global::Spout.Interop.SpoutSenderNames.__Internal sendernames;
            internal global::Spout.Interop.SpoutFrameCount.__Internal frame;
            internal global::Spout.Interop.SpoutSharedMemory.__Internal memoryshare;
            internal int m_nBuffers;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal fixed uint m_loadpbo[4];
            internal int PboLoadIndex;
            internal int NextPboLoadIndex;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_DestWidth;
            internal uint m_DestHeight;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal global::DXGI_FORMAT m_DX11format;
            internal uint m_dwFormat;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal byte m_bInteropFailed;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bSender;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@spoutGL@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@spoutGL@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, int interval);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitTexture@spoutGL@@QEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@spoutGL@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@spoutGL@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutGL@@QEAAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ClearAlpha@spoutGL@@QEAAXPEAEIIE@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAlpha(__IntPtr __instance, byte* src, uint width, uint height, byte alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpout@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenSpout(__IntPtr __instance, bool bRetest);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDirectX@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@spoutGL@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@spoutGL@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetHostPath@spoutGL@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutGL@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDX11@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LoadGLextensions@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadGLextensions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LinkGLDXtextures@spoutGL@@QEAAPEAXPEAX0I@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LinkGLDXtextures(__IntPtr __instance, __IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnloadTexturePixels@spoutGL@@QEAA_NIIIIIPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnloadTexturePixels(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LoadTexturePixels@spoutGL@@QEAA_NIIIIPEBEH_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadTexturePixels(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, byte* data, int GLformat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@spoutGL@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@spoutGL@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@spoutGL@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@spoutGL@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateInterop@spoutGL@@IEAA_NIIK_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateInterop(__IntPtr __instance, uint width, uint height, uint dwFormat, bool bReceive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnlockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnlockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupGL@spoutGL@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckOpenGLTexture@spoutGL@@IEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckOpenGLTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSharedTextureData@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedTextureData(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXpixels@spoutGL@@IEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXpixels@spoutGL@@IEAA_NPEAEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11pixels@spoutGL@@IEAA_NPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11pixels@spoutGL@@IEAA_NPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckStagingTextures@spoutGL@@IEAA_NIIH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckStagingTextures(__IntPtr __instance, uint width, uint height, int nTextures);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryTexture@spoutGL@@IEAA_NPEBDIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryTexture(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryPixels@spoutGL@@IEAA_NPEBDPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryPixels@spoutGL@@IEAA_NPEBDPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDeviceKey@spoutGL@@IEAA_NPEBDHPEAD1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDeviceKey(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, int maxsize, sbyte* description, sbyte* version);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?trim@spoutGL@@IEAAXPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Trim(__IntPtr __instance, sbyte* s);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?PrintFBOstatus@spoutGL@@IEAAXI@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PrintFBOstatus(__IntPtr __instance, uint status);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@spoutGL@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLerror@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLerror(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSpoutInitialized@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSpoutInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupInterop@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CleanupInterop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBLITavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBLITavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSWAPavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSWAPavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBGRAavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBGRAavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCOPYavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCOPYavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPBOavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPBOavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCONTEXTavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCONTEXTavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLversion@spoutGL@@QEAAMXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetGLversion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetInteropDevice@spoutGL@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInteropDevice(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetInteropObject@spoutGL@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInteropObject(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutGL>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutGL>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutGL managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutGL>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutGL managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutGL __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutGL(native.ToPointer(), skipVTables);
        }

        internal static SpoutGL __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutGL)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutGL __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (SpoutGL)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static SpoutGL __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutGL(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.Interop.SpoutGL.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutGL(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutGL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public SpoutGL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "Spout.Interop.SpoutGL");
        }

        public SpoutGL(global::Spout.Interop.SpoutGL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "Spout.Interop.SpoutGL");
        }

        ~SpoutGL()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Spout.Interop.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        public bool SetVerticalSync(int interval)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, interval);
            return ___ret;
        }

        public void InitTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.InitTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, stride, glFormat);
        }

        public void ClearAlpha(byte* src, uint width, uint height, byte alpha)
        {
            __Internal.ClearAlpha(__Instance, src, width, height, alpha);
        }

        public bool OpenSpout(bool bRetest)
        {
            var ___ret = __Internal.OpenSpout(__Instance, bRetest);
            return ___ret;
        }

        public bool OpenDirectX()
        {
            var ___ret = __Internal.OpenDirectX(__Instance);
            return ___ret;
        }

        public void CloseDirectX()
        {
            __Internal.CloseDirectX(__Instance);
        }

        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        public string GLformatName(int glformat)
        {
            var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        public bool SetHostPath(string sendername)
        {
            var ___ret = __Internal.SetHostPath(__Instance, sendername);
            return ___ret;
        }

        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var ___ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return ___ret;
        }

        public void CleanupDirectX()
        {
            __Internal.CleanupDirectX(__Instance);
        }

        public void CleanupDX11()
        {
            __Internal.CleanupDX11(__Instance);
        }

        public bool LoadGLextensions()
        {
            var ___ret = __Internal.LoadGLextensions(__Instance);
            return ___ret;
        }

        public __IntPtr LinkGLDXtextures(__IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID)
        {
            var ___ret = __Internal.LinkGLDXtextures(__Instance, pDXdevice, pSharedTexture, glTextureID);
            return ___ret;
        }

        public bool WriteDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool ReadDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool UnloadTexturePixels(uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.UnloadTexturePixels(__Instance, TextureID, TextureTarget, width, height, pitch, data, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        public bool LoadTexturePixels(uint TextureID, uint TextureTarget, uint width, uint height, byte* data, int GLformat, bool bInvert)
        {
            var ___ret = __Internal.LoadTexturePixels(__Instance, TextureID, TextureTarget, width, height, data, GLformat, bInvert);
            return ___ret;
        }

        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var ___ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return ___ret;
        }

        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var ___ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return ___ret;
        }

        public bool CreateMemoryBuffer(string name, int length)
        {
            var ___ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return ___ret;
        }

        public bool DeleteMemoryBuffer()
        {
            var ___ret = __Internal.DeleteMemoryBuffer(__Instance);
            return ___ret;
        }

        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        protected bool CreateInterop(uint width, uint height, uint dwFormat, bool bReceive)
        {
            var ___ret = __Internal.CreateInterop(__Instance, width, height, dwFormat, bReceive);
            return ___ret;
        }

        protected int LockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var ___ret = __Internal.LockInteropObject(__Instance, hDevice, hObject);
            return ___ret;
        }

        protected int UnlockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var ___ret = __Internal.UnlockInteropObject(__Instance, hDevice, hObject);
            return ___ret;
        }

        protected void CleanupGL()
        {
            __Internal.CleanupGL(__Instance);
        }

        protected void CheckOpenGLTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.CheckOpenGLTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        protected bool WriteGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        protected bool ReadGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        protected bool SetSharedTextureData(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SetSharedTextureData(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        protected bool WriteGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        protected bool ReadGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        protected bool WriteDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.WriteDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        protected bool ReadDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.ReadDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        protected bool CheckStagingTextures(uint width, uint height, int nTextures)
        {
            var ___ret = __Internal.CheckStagingTextures(__Instance, width, height, nTextures);
            return ___ret;
        }

        protected bool ReadMemoryTexture(string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadMemoryTexture(__Instance, sendername, TexID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        protected bool ReadMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.ReadMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        protected bool WriteMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.WriteMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        protected bool OpenDeviceKey(string key, int maxsize, sbyte* description, sbyte* version)
        {
            var ___ret = __Internal.OpenDeviceKey(__Instance, key, maxsize, description, version);
            return ___ret;
        }

        protected void Trim(sbyte* s)
        {
            __Internal.Trim(__Instance, s);
        }

        protected void PrintFBOstatus(uint status)
        {
            __Internal.PrintFBOstatus(__Instance, status);
        }

        public global::Spout.Interop.SpoutDirectX Spoutdx
        {
            get
            {
                return global::Spout.Interop.SpoutDirectX.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutdx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutdx = *(global::Spout.Interop.SpoutDirectX.__Internal*) value.__Instance;
            }
        }

        public global::Spout.Interop.SpoutCopy Spoutcopy
        {
            get
            {
                return global::Spout.Interop.SpoutCopy.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutcopy));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutcopy = *(global::Spout.Interop.SpoutCopy.__Internal*) value.__Instance;
            }
        }

        public global::Spout.Interop.SpoutSenderNames Sendernames
        {
            get
            {
                return global::Spout.Interop.SpoutSenderNames.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->sendernames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->sendernames = *(global::Spout.Interop.SpoutSenderNames.__Internal*) value.__Instance;
            }
        }

        public global::Spout.Interop.SpoutFrameCount Frame
        {
            get
            {
                return global::Spout.Interop.SpoutFrameCount.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->frame));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->frame = *(global::Spout.Interop.SpoutFrameCount.__Internal*) value.__Instance;
            }
        }

        protected global::Spout.Interop.SpoutSharedMemory Memoryshare
        {
            get
            {
                return global::Spout.Interop.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->memoryshare));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->memoryshare = *(global::Spout.Interop.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected int MNBuffers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBuffers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBuffers = value;
            }
        }

        protected uint[] MPbo
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_pbo, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_pbo[i] = value[i];
                }
            }
        }

        protected int PboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->PboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->PboIndex = value;
            }
        }

        protected int NextPboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->NextPboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->NextPboIndex = value;
            }
        }

        protected uint[] MLoadpbo
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_loadpbo, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_loadpbo[i] = value[i];
                }
            }
        }

        protected int PboLoadIndex
        {
            get
            {
                return ((__Internal*)__Instance)->PboLoadIndex;
            }

            set
            {
                ((__Internal*)__Instance)->PboLoadIndex = value;
            }
        }

        protected int NextPboLoadIndex
        {
            get
            {
                return ((__Internal*)__Instance)->NextPboLoadIndex;
            }

            set
            {
                ((__Internal*)__Instance)->NextPboLoadIndex = value;
            }
        }

        // ID3D11Texture2D was not declared by CppSharp, but this is internal (not
        // part of the Spout2 API docs) so for Spout.NETCore we just comment it out.

        //protected global::ID3D11Texture2D[] MPStaging
        //{
        //    get
        //    {
        //        global::ID3D11Texture2D[] __value = null;
        //        if (((__Internal*)__Instance)->m_pStaging != null)
        //        {
        //            __value = new global::ID3D11Texture2D[2];
        //            for (int i = 0; i < 2; i++)
        //                __value[i] = global::ID3D11Texture2D.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pStaging[i]);
        //        }
        //        return __value;
        //    }

        //    set
        //    {
        //        if (value != null)
        //        {
        //            if (value.Length != 2)
        //                throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
        //            for (int i = 0; i < 2; i++)
        //                ((__Internal*)__Instance)->m_pStaging[i] = (long) value[i].__Instance;
        //        }
        //    }
        //}

        protected int MIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_Index;
            }

            set
            {
                ((__Internal*)__Instance)->m_Index = value;
            }
        }

        protected int MNextIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_NextIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_NextIndex = value;
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderNameSetup
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderNameSetup, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderNameSetup[i] = value[i];
                }
            }
        }

        protected uint MWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_Width;
            }

            set
            {
                ((__Internal*)__Instance)->m_Width = value;
            }
        }

        protected uint MHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_Height;
            }

            set
            {
                ((__Internal*)__Instance)->m_Height = value;
            }
        }

        protected uint MFbo
        {
            get
            {
                return ((__Internal*)__Instance)->m_fbo;
            }

            set
            {
                ((__Internal*)__Instance)->m_fbo = value;
            }
        }

        protected uint MTexID
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexID;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexID = value;
            }
        }

        protected uint MTexWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexWidth = value;
            }
        }

        protected uint MTexHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexHeight = value;
            }
        }

        protected uint MTexFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexFormat = value;
            }
        }

        protected uint MDestWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_DestWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_DestWidth = value;
            }
        }

        protected uint MDestHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_DestHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_DestHeight = value;
            }
        }

        protected uint MGlTexture
        {
            get
            {
                return ((__Internal*)__Instance)->m_glTexture;
            }

            set
            {
                ((__Internal*)__Instance)->m_glTexture = value;
            }
        }

        protected __IntPtr MDxShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->m_dxShareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->m_dxShareHandle = (__IntPtr) value;
            }
        }

        protected uint MDwFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwFormat = value;
            }
        }

        protected __IntPtr MHInteropDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropDevice;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropDevice = (__IntPtr) value;
            }
        }

        protected __IntPtr MHInteropObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropObject = (__IntPtr) value;
            }
        }

        protected bool MBInteropFailed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInteropFailed != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInteropFailed = (byte) (value ? 1 : 0);
            }
        }

        protected int MSpoutVersion
        {
            get
            {
                return ((__Internal*)__Instance)->m_SpoutVersion;
            }

            set
            {
                ((__Internal*)__Instance)->m_SpoutVersion = value;
            }
        }

        protected bool MBConnected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnected != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnected = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUpdated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdated = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBInitialized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInitialized != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInitialized = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSender
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSender != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSender = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBGLDXdone
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXdone != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXdone = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBAuto
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAuto != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAuto = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUseGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUseGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUseGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBTextureShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTextureShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTextureShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPUshare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPUshare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPUshare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMemoryShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMemoryShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMemoryShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelOpened != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelOpened = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelActive = (byte) (value ? 1 : 0);
            }
        }

        protected uint MCaps
        {
            get
            {
                return ((__Internal*)__Instance)->m_caps;
            }

            set
            {
                ((__Internal*)__Instance)->m_caps = value;
            }
        }

        protected bool MBGLDXavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBFBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBLITavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBLITavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBLITavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBPBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSWAPavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSWAPavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSWAPavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBGRAavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBGRAavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBGRAavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCOPYavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCOPYavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCOPYavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCONTEXTavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCONTEXTavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCONTEXTavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBExtensionsLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExtensionsLoaded != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExtensionsLoaded = (byte) (value ? 1 : 0);
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetVerticalSync(__Instance, value);
            }
        }

        public int SpoutVersion
        {
            get
            {
                var ___ret = __Internal.GetSpoutVersion(__Instance);
                return ___ret;
            }
        }

        public bool GLerror
        {
            get
            {
                var ___ret = __Internal.GLerror(__Instance);
                return ___ret;
            }
        }

        public bool IsSpoutInitialized
        {
            get
            {
                var ___ret = __Internal.IsSpoutInitialized(__Instance);
                return ___ret;
            }
        }

        public bool GLDXready
        {
            get
            {
                var ___ret = __Internal.GLDXready(__Instance);
                return ___ret;
            }
        }

        public bool CleanupInterop
        {
            get
            {
                var ___ret = __Internal.CleanupInterop(__Instance);
                return ___ret;
            }
        }

        public bool IsGLDXavailable
        {
            get
            {
                var ___ret = __Internal.IsGLDXavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsBLITavailable
        {
            get
            {
                var ___ret = __Internal.IsBLITavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsSWAPavailable
        {
            get
            {
                var ___ret = __Internal.IsSWAPavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsBGRAavailable
        {
            get
            {
                var ___ret = __Internal.IsBGRAavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsCOPYavailable
        {
            get
            {
                var ___ret = __Internal.IsCOPYavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsPBOavailable
        {
            get
            {
                var ___ret = __Internal.IsPBOavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsCONTEXTavailable
        {
            get
            {
                var ___ret = __Internal.IsCONTEXTavailable(__Instance);
                return ___ret;
            }
        }

        public float GLversion
        {
            get
            {
                var ___ret = __Internal.GetGLversion(__Instance);
                return ___ret;
            }
        }

        public __IntPtr InteropDevice
        {
            get
            {
                var ___ret = __Internal.GetInteropDevice(__Instance);
                return ___ret;
            }
        }

        public __IntPtr InteropObject
        {
            get
            {
                var ___ret = __Internal.GetInteropObject(__Instance);
                return ___ret;
            }
        }

        #region Virtual table interop

        // virtual ~spoutGL()
        private static global::Spout.Interop.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::Spout.Interop.SpoutGL.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class SpoutReceiver : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2008)]
        public partial struct __Internal
        {
            internal global::Spout.Interop.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetReceiverName@SpoutReceiver@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetReceiverName(__IntPtr __instance, sbyte* SenderName, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutReceiver@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@SpoutReceiver@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutReceiver@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutReceiver@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutReceiver@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutReceiver@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutReceiver@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@SpoutReceiver@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@SpoutReceiver@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@SpoutReceiver@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutReceiver@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSDKversion@SpoutReceiver@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSDKversion(__IntPtr __instance, __IntPtr @return, int* pNumber);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutReceiver@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@SpoutReceiver@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@SpoutReceiver@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@SpoutReceiver@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@SpoutReceiver@@QEAA_NPEADAEAI1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@SpoutReceiver@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSenderPanel@SpoutReceiver@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSenderPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@SpoutReceiver@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@SpoutReceiver@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@SpoutReceiver@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@SpoutReceiver@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@SpoutReceiver@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutReceiver@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutReceiver>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutReceiver>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutReceiver managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutReceiver>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutReceiver managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutReceiver __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutReceiver(native.ToPointer(), skipVTables);
        }

        internal static SpoutReceiver __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutReceiver)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutReceiver __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutReceiver(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.Interop.SpoutReceiver.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutReceiver(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutReceiver(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutReceiver()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutReceiver(global::Spout.Interop.SpoutReceiver _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutReceiver()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        public bool GetReceiverName(sbyte* SenderName, int maxchars)
        {
            var ___ret = __Internal.GetReceiverName(__Instance, SenderName, maxchars);
            return ___ret;
        }

        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        public bool ReceiveTexture()
        {
            var ___ret = __Internal.ReceiveTexture(__Instance);
            return ___ret;
        }

        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return ___ret;
        }

        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return ___ret;
        }

        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var ___ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return ___ret;
        }

        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        public bool SetVerticalSync(bool bSync)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, bSync);
            return ___ret;
        }

        public string GetSDKversion(ref int pNumber)
        {
            fixed (int* __pNumber0 = &pNumber)
            {
                var __arg0 = __pNumber0;
                var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSDKversion(__Instance, new IntPtr(&___ret), __arg0);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }
        }

        public bool CreateOpenGL()
        {
            var ___ret = __Internal.CreateOpenGL(__Instance);
            return ___ret;
        }

        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        public string GLformatName(int glformat)
        {
            var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2);
                    return ___ret;
                }
            }
        }

        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var ___ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return ___ret;
                    }
                }
            }
        }

        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        public bool SelectSenderPanel(string message)
        {
            var ___ret = __Internal.SelectSenderPanel(__Instance, message);
            return ___ret;
        }

        public bool CheckSenderPanel(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.CheckSenderPanel(__Instance, sendername, maxchars);
            return ___ret;
        }

        public global::Spout.Interop.Spout Spout
        {
            get
            {
                return global::Spout.Interop.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::Spout.Interop.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var ___ret = __Internal.IsUpdated(__Instance);
                return ___ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var ___ret = __Internal.IsConnected(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint SenderWidth
        {
            get
            {
                var ___ret = __Internal.GetSenderWidth(__Instance);
                return ___ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var ___ret = __Internal.GetSenderHeight(__Instance);
                return ___ret;
            }
        }

        public uint SenderFormat
        {
            get
            {
                var ___ret = __Internal.GetSenderFormat(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var ___ret = __Internal.GetSenderHandle(__Instance);
                return ___ret;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var ___ret = __Internal.GetSenderCPU(__Instance);
                return ___ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var ___ret = __Internal.GetSenderGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class SpoutSender : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2008)]
        public partial struct __Internal
        {
            internal global::Spout.Interop.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@SpoutSender@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@SpoutSender@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@SpoutSender@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@SpoutSender@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutSender@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@SpoutSender@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@SpoutSender@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutSender@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutSender@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutSender@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutSender@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutSender@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutSender@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@SpoutSender@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@SpoutSender@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@SpoutSender@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@SpoutSender@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutSender@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutSender@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, int interval);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutSender@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@SpoutSender@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@SpoutSender@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@SpoutSender@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@SpoutSender@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@SpoutSender@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@SpoutSender@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@SpoutSender@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@SpoutSender@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@SpoutSender@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutSender@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSender>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::Spout.Interop.SpoutSender>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Spout.Interop.SpoutSender managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::Spout.Interop.SpoutSender>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Spout.Interop.SpoutSender managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSender __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSender(native.ToPointer(), skipVTables);
        }

        internal static SpoutSender __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSender)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSender __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSender(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.Interop.SpoutSender.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutSender(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSender(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SpoutSender()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        public SpoutSender(global::Spout.Interop.SpoutSender _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Interop.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutSender()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetSenderName(string sendername)
        {
            __Internal.SetSenderName(__Instance, sendername);
        }

        public void SetSenderFormat(uint dwFormat)
        {
            __Internal.SetSenderFormat(__Instance, dwFormat);
        }

        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var ___ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return ___ret;
        }

        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var ___ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return ___ret;
        }

        public bool CreateMemoryBuffer(string name, int length)
        {
            var ___ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return ___ret;
        }

        public bool DeleteMemoryBuffer()
        {
            var ___ret = __Internal.DeleteMemoryBuffer(__Instance);
            return ___ret;
        }

        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        public bool SetVerticalSync(int interval)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, interval);
            return ___ret;
        }

        public bool CreateOpenGL()
        {
            var ___ret = __Internal.CreateOpenGL(__Instance);
            return ___ret;
        }

        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        public string GLformatName(int glformat)
        {
            var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return ___ret;
        }

        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var ___ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return ___ret;
        }

        public global::Spout.Interop.Spout Spout
        {
            get
            {
                return global::Spout.Interop.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::Spout.Interop.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsInitialized
        {
            get
            {
                var ___ret = __Internal.IsInitialized(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint Width
        {
            get
            {
                var ___ret = __Internal.GetWidth(__Instance);
                return ___ret;
            }
        }

        public uint Height
        {
            get
            {
                var ___ret = __Internal.GetHeight(__Instance);
                return ___ret;
            }
        }

        public double Fps
        {
            get
            {
                var ___ret = __Internal.GetFps(__Instance);
                return ___ret;
            }
        }

        public int Frame
        {
            get
            {
                var ___ret = __Internal.GetFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var ___ret = __Internal.GetHandle(__Instance);
                return ___ret;
            }
        }

        public bool CPU
        {
            get
            {
                var ___ret = __Internal.GetCPU(__Instance);
                return ___ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var ___ret = __Internal.GetGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetVerticalSync(__Instance, value);
            }
        }

        public int SpoutVersion
        {
            get
            {
                var ___ret = __Internal.GetSpoutVersion(__Instance);
                return ___ret;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_int(__IntPtr __instance, int arg1);
    }
}
namespace Spout.Interop.__Symbols
{
    internal class Spout_Interop_dll
    {
        public static IntPtr _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA { get; }
        public static IntPtr _wglDXCloseDeviceNV__3P6AHPEAX_ZEA { get; }
        public static IntPtr _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA { get; }
        public static IntPtr _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _glBindFramebufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glBindRenderbufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glCheckFramebufferStatusEXT__3P6AII_ZEA { get; }
        public static IntPtr _glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA { get; }
        public static IntPtr _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA { get; }
        public static IntPtr _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA { get; }
        public static IntPtr _glGenFramebuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenerateMipmapEXT__3P6AXI_ZEA { get; }
        public static IntPtr _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA { get; }
        public static IntPtr _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glIsFramebufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glIsRenderbufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glRenderbufferStorageEXT__3P6AXIIHH_ZEA { get; }
        public static IntPtr _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA { get; }
        public static IntPtr _wglSwapIntervalEXT__3P6AHH_ZEA { get; }
        public static IntPtr _wglGetSwapIntervalEXT__3P6AHXZEA { get; }
        public static IntPtr _glGenBuffers__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glDeleteBuffers__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glBindBuffer__3P6AXII_ZEA { get; }
        public static IntPtr _glBufferData__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glBufferStorage__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glMapBuffer__3P6APEAXII_ZEA { get; }
        public static IntPtr _glMapBufferRange__3P6APEAXI_J0I_ZEA { get; }
        public static IntPtr _glUnmapBuffer__3P6AEI_ZEA { get; }
        public static IntPtr _glGetBufferParameteriv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glGetTextureParameteriv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA { get; }
        public static IntPtr _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA { get; }
        public static IntPtr _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA { get; }
        public static IntPtr _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA { get; }
        public static IntPtr _glGetInternalformativ__3P6AXIIIHPEAH_ZEA { get; }
        public static IntPtr _glCreateProgram__3P6AIXZEA { get; }
        public static IntPtr _glCreateShader__3P6AII_ZEA { get; }
        public static IntPtr _glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA { get; }
        public static IntPtr _glCompileShader__3P6AXI_ZEA { get; }
        public static IntPtr _glAttachShader__3P6AXII_ZEA { get; }
        public static IntPtr _glLinkProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glGetProgramiv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA { get; }
        public static IntPtr _glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA { get; }
        public static IntPtr _glGetIntegeri_v__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glDetachShader__3P6AXII_ZEA { get; }
        public static IntPtr _glUseProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glBindImageTexture__3P6AXIIHEHII_ZEA { get; }
        public static IntPtr _glDispatchCompute__3P6AXIII_ZEA { get; }
        public static IntPtr _glDeleteProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glDeleteShader__3P6AXI_ZEA { get; }
        public static IntPtr _glMemoryBarrier__3P6AXI_ZEA { get; }
        public static IntPtr _glActiveTexture__3P6AXI_ZEA { get; }
        public static IntPtr _glUniform1i__3P6AXHH_ZEA { get; }
        public static IntPtr _glUniform1f__3P6AXHM_ZEA { get; }
        public static IntPtr _glGetUniformLocation__3P6AHIPEBD_ZEA { get; }
        public static IntPtr _glTextureStorage2D__3P6AXIHIHH_ZEA { get; }
        public static IntPtr _glCreateTextures__3P6AXIHPEAI_ZEA { get; }
        public static IntPtr _glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA { get; }
        public static IntPtr _glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA { get; }
        public static IntPtr _glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA { get; }
        public static IntPtr _glBufferStorageMemEXT__3P6AXI_JI_K_ZEA { get; }
        public static IntPtr _glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA { get; }
        public static IntPtr _glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glIsMemoryObjectEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glCreateBuffers__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glBindBufferBase__3P6AXIII_ZEA { get; }
        static Spout_Interop_dll()
        {
            var path = "Spout.Interop.dll";
            var image = CppSharp.SymbolResolver.LoadImage(ref path);
            if (image == IntPtr.Zero) throw new global::System.DllNotFoundException(path);
            _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXOpenDeviceNV@@3P6APEAXPEAX@ZEA");
            _wglDXCloseDeviceNV__3P6AHPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXCloseDeviceNV@@3P6AHPEAX@ZEA");
            _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXRegisterObjectNV@@3P6APEAXPEAX0III@ZEA");
            _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnregisterObjectNV@@3P6AHPEAX0@ZEA");
            _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXSetResourceShareHandleNV@@3P6AHPEAX0@ZEA");
            _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXLockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnlockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _glBindFramebufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindFramebufferEXT@@3P6AXII@ZEA");
            _glBindRenderbufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindRenderbufferEXT@@3P6AXII@ZEA");
            _glCheckFramebufferStatusEXT__3P6AII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCheckFramebufferStatusEXT@@3P6AII@ZEA");
            _glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCheckNamedFramebufferStatusEXT@@3P6AIII@ZEA");
            _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteFramebuffersEXT@@3P6AXHPEBI@ZEA");
            _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteRenderBuffersEXT@@3P6AXHPEBI@ZEA");
            _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferRenderbufferEXT@@3P6AXIIII@ZEA");
            _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture1DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture2DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture3DEXT@@3P6AXIIIIHH@ZEA");
            _glGenFramebuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenFramebuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenRenderbuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenerateMipmapEXT__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenerateMipmapEXT@@3P6AXI@ZEA");
            _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetFramebufferAttachmentParameterivEXT@@3P6AXIIIPEAH@ZEA");
            _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetRenderbufferParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glIsFramebufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsFramebufferEXT@@3P6AEI@ZEA");
            _glIsRenderbufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsRenderbufferEXT@@3P6AEI@ZEA");
            _glRenderbufferStorageEXT__3P6AXIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glRenderbufferStorageEXT@@3P6AXIIHH@ZEA");
            _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBlitFramebufferEXT@@3P6AXHHHHHHHHII@ZEA");
            _wglSwapIntervalEXT__3P6AHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglSwapIntervalEXT@@3P6AHH@ZEA");
            _wglGetSwapIntervalEXT__3P6AHXZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglGetSwapIntervalEXT@@3P6AHXZEA");
            _glGenBuffers__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenBuffers@@3P6AXHPEAI@ZEA");
            _glDeleteBuffers__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteBuffers@@3P6AXHPEBI@ZEA");
            _glBindBuffer__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindBuffer@@3P6AXII@ZEA");
            _glBufferData__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferData@@3P6AXI_JPEBXI@ZEA");
            _glBufferStorage__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferStorage@@3P6AXI_JPEBXI@ZEA");
            _glMapBuffer__3P6APEAXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBuffer@@3P6APEAXII@ZEA");
            _glMapBufferRange__3P6APEAXI_J0I_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBufferRange@@3P6APEAXI_J0I@ZEA");
            _glUnmapBuffer__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUnmapBuffer@@3P6AEI@ZEA");
            _glGetBufferParameteriv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetBufferParameteriv@@3P6AXIIPEAH@ZEA");
            _glGetTextureParameteriv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetTextureParameteriv@@3P6AXIIPEAH@ZEA");
            _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glClientWaitSyncEXT@@3P6AIPEAU__GLsync@@I_K@ZEA");
            _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteSyncEXT@@3P6AXPEAU__GLsync@@@ZEA");
            _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFenceSyncEXT@@3P6APEAU__GLsync@@II@ZEA");
            _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCopyImageSubData@@3P6AXIIHHHHIIHHHHHHH@ZEA");
            _glGetInternalformativ__3P6AXIIIHPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetInternalformativ@@3P6AXIIIHPEAH@ZEA");
            _glCreateProgram__3P6AIXZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateProgram@@3P6AIXZEA");
            _glCreateShader__3P6AII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateShader@@3P6AII@ZEA");
            _glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glShaderSource@@3P6AXIHPEBQEBDPEBH@ZEA");
            _glCompileShader__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCompileShader@@3P6AXI@ZEA");
            _glAttachShader__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glAttachShader@@3P6AXII@ZEA");
            _glLinkProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glLinkProgram@@3P6AXI@ZEA");
            _glGetProgramiv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetProgramiv@@3P6AXIIPEAH@ZEA");
            _glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetProgramInfoLog@@3P6AXIHPEAHPEAD@ZEA");
            _glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetShaderInfoLog@@3P6AXIHPEAHPEAD@ZEA");
            _glGetIntegeri_v__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetIntegeri_v@@3P6AXIIPEAH@ZEA");
            _glDetachShader__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDetachShader@@3P6AXII@ZEA");
            _glUseProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUseProgram@@3P6AXI@ZEA");
            _glBindImageTexture__3P6AXIIHEHII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindImageTexture@@3P6AXIIHEHII@ZEA");
            _glDispatchCompute__3P6AXIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDispatchCompute@@3P6AXIII@ZEA");
            _glDeleteProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteProgram@@3P6AXI@ZEA");
            _glDeleteShader__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteShader@@3P6AXI@ZEA");
            _glMemoryBarrier__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMemoryBarrier@@3P6AXI@ZEA");
            _glActiveTexture__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glActiveTexture@@3P6AXI@ZEA");
            _glUniform1i__3P6AXHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUniform1i@@3P6AXHH@ZEA");
            _glUniform1f__3P6AXHM_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUniform1f@@3P6AXHM@ZEA");
            _glGetUniformLocation__3P6AHIPEBD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetUniformLocation@@3P6AHIPEBD@ZEA");
            _glTextureStorage2D__3P6AXIHIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTextureStorage2D@@3P6AXIHIHH@ZEA");
            _glCreateTextures__3P6AXIHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateTextures@@3P6AXIHPEAI@ZEA");
            _glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateMemoryObjectsEXT@@3P6AXHPEAI@ZEA");
            _glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteMemoryObjectsEXT@@3P6AXHPEBI@ZEA");
            _glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTexStorageMem2DEXT@@3P6AXIHIHHI_K@ZEA");
            _glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTextureStorageMem2DEXT@@3P6AXIHIHHI_K@ZEA");
            _glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glImportMemoryWin32HandleEXT@@3P6AXI_KIPEAX@ZEA");
            _glBufferStorageMemEXT__3P6AXI_JI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferStorageMemEXT@@3P6AXI_JI_K@ZEA");
            _glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMemoryObjectParameterivEXT@@3P6AXIIPEBH@ZEA");
            _glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetMemoryObjectParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glIsMemoryObjectEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsMemoryObjectEXT@@3P6AEI@ZEA");
            _glCreateBuffers__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateBuffers@@3P6AXHPEAI@ZEA");
            _glBindBufferBase__3P6AXIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindBufferBase@@3P6AXIII@ZEA");
        }
    }
}

